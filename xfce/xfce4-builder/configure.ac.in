dnl
dnl xfce4-builder - A program to build XFCE from its sources
dnl
dnl 2013 J. Preiss <joerg.preiss@slesa.de>

dnl ***************************
dnl *** Version information ***
dnl ***************************
m4_define([builder_version_major], [0])
m4_define([builder_version_minor], [0])
m4_define([builder_version_micro], [1])
m4_define([builder_version_build], [@REVISION@])
m4_define([builder_version_tag], [git])
m4_define([builder_version], [builder_version_major().builder_version_minor().builder_version_micro()ifelse(builder_version_tag(), [git], [builder_version_tag()-builder_version_build()], [builder_version_tag()])])
s
dnl ***************************
dnl *** Initialize autoconf ***
dnl ***************************
AC_COPYRIGHT([Copyright (c) 2013-2014
        The Xfce development team. All rights reserved.])
AC_INIT([Xfce4 Builder], [builder_version], [httpa://github.com/Slesa/Godot/xfce4-builder], [xfce4-builder],
        [http://goodies.xfce.org/projects/applications/xfce4-builder])
AC_PREREQ([2.50])
AC_CANONICAL_TARGET()
AC_REVISION([builder_version_build])

dnl ***************************
dnl *** Initialize automake ***
dnl ***************************
AM_INIT_AUTOMAKE([1.8 no-dist-gzip dist-bzip2])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE()
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

dnl ********************************
dnl *** Check for basic programs ***
dnl ********************************
AC_PROG_CC()
AM_PROG_CC_C_O()
AC_PROG_LD()
AC_PROG_INSTALL()
AC_PROG_LIBTOOL()
AC_PROG_INTLTOOL()

dnl ************************************
dnl *** Checks for library functions ***
dnl ************************************
AC_DISABLE_STATIC()
AC_C_CONST()

dnl **********************************
dnl *** Check for standard headers ***
dnl **********************************
AC_HEADER_STDC()
AC_CHECK_HEADERS([stdlib.h string.h])

dnl ******************************
dnl *** Check for i18n support ***
dnl ******************************
XDT_I18N([@LINGUAS@])

dnl ***********************************
dnl *** Check for required packages ***
dnl ***********************************
XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [2.12.0])
XDT_CHECK_PACKAGE([CAIRO], [cairo], [1.5.0])

dnl ***********************************
dnl *** Check for optional packages ***
dnl ***********************************
XDT_CHECK_OPTIONAL_PACKAGE([WNCK], [libwnck-1.0], [2.0], [wnck], [building with libwnck for window icons/names], [yes])
AM_CONDITIONAL([HAVE_WNCK], [test x"$WNCK_FOUND" = x"yes"])
XDT_CHECK_OPTIONAL_PACKAGE([GKSU], [libgksu2], [2.0], [gksu], [building with libgksu to run as root], [yes])
AM_CONDITIONAL([HAVE_GKSU], [test x"$GKSU_FOUND" = x"yes"])

dnl ***********************************
dnl ********** Check for skel *********
dnl ***********************************
AC_ARG_WITH([skel],
		AC_HELP_STRING([--with-skel], [build with task-manager-skel.c]),
		[ac_skel="$withval"],
		[ac_skel=no])

dnl ***********************************
dnl ******* Check for OS family *******
dnl ***********************************
if test x"$ac_skel" = x"yes"; then
	ac_os_implementation="skel"
else
	case "$target_os" in
		freebsd*)
		ac_os_implementation="freebsd"
		AC_CHECK_LIB([kvm], [kvm_openfiles])
		AC_CHECK_HEADERS([fcntl.h kvm.h paths.h pwd.h sys/param.h sys/proc.h \
				sys/sysctl.h sys/types.h sys/user.h unistd.h])
		;;
		dragonfly*|netbsd*|openbsd*|darwin*)
		ac_os_implementation="bsd"
		AC_CHECK_HEADERS([err.h pwd.h stdlib.h string.h sys/param.h sys/sched.h \
				sys/swap.h sys/sysctl.h sys/types.h unistd.h])
		;;
		solaris*)
		ac_os_implementation="solaris"
		AC_CHECK_LIB([kstat], [kstat_open])
		AC_CHECK_HEADERS([fcntl.h kstat.h procfs.h pwd.h stdlib.h string.h \
				sys/procfs.h sys/stat.h sys/swap.h sys/types.h])
		;;
		linux*)
		ac_os_implementation="linux"
		AC_CHECK_HEADERS([pwd.h signal.h stdio.h string.h sys/resource.h \
				sys/stat.h sys/types.h unistd.h])
		;;
		*)
		AC_MSG_CHECKING([for OS implementation])
		AC_MSG_ERROR([no OS implementation for $target_os is available])
		;;
	esac
fi
AC_MSG_CHECKING([for OS implementation])
AC_MSG_RESULT([$ac_os_implementation])

AM_CONDITIONAL([OS_FREEBSD], [test x"$ac_os_implementation" = x"freebsd"])
AM_CONDITIONAL([OS_BSD], [test x"$ac_os_implementation" = x"bsd"])
AM_CONDITIONAL([OS_SOLARIS], [test x"$ac_os_implementation" = x"solaris"])
AM_CONDITIONAL([OS_LINUX], [test x"$ac_os_implementation" = x"linux"])
AM_CONDITIONAL([OS_SKEL], [test x"$ac_os_implementation" = x"skel"])

dnl ***********************************
dnl *** Check for debugging support ***
dnl ***********************************
XDT_FEATURE_DEBUG()

dnl ***************
dnl *** Outputs ***
dnl ***************
AC_OUTPUT([
Makefile
builder/Makefile
po/Makefile.in
])

dnl ***************************
dnl *** Print configuration ***
dnl ***************************
echo
echo "Build Configuration:"
echo
echo "* Gksu:          ${GKSU_VERSION:-no}"
echo "* Wnck:          ${WNCK_VERSION:-no}"
echo "* Cairo:         ${CAIRO_VERSION}"
echo "* GTK+:          ${GTK_VERSION}"
echo "* Target OS:     $target_os ($ac_os_implementation)"
echo "* Debug:         $enable_debug"
echo

